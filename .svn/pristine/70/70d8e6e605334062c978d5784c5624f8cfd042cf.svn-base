<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	 xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://code.alibabatech.com/schema/dubbo  http://code.alibabatech.com/schema/dubbo/dubbo.xsd
		">

    <context:property-placeholder
		location="classpath:jdbc.properties,classpath:druid-config.properties,classpath:config.properties" />
    <context:component-scan base-package="com.ujuit.quant.*.service,com.ujuit.sysmanager.core.mybatis" />
	
	
	
		<!-- 提供方应用信息，用于计算依赖关系 -->
	<dubbo:application name="consumer-of-inside-stock-service" />

	<!-- 使用multicast广播注册中心暴露服务地址 -->
	<dubbo:registry address="${inside.stock.center.address}" />
	<!-- 生成远程服务代理，可以和本地bean一样使用demoService -->
	<dubbo:reference id="strategyTestService" check="false" timeout="10000" 
		interface="com.ujuit.strategysdkserver.service.StrategyTestService" />
		
	<dubbo:reference id="calculationApiService" check="false" timeout="30000"  retries="0"
		interface="com.ujuit.quantcalation.api.service.CalculationApiService" />
   
 	<aop:aspectj-autoproxy proxy-target-class="true" />
	<tx:annotation-driven transaction-manager="transactionManager" />
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="datastore" />
 

	<bean id="datastore" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close">
		<property name="url"
			value="${jdbc.protocol}://${jdbc.host}:${jdbc.port}/${jdbc.database}?${jdbc.param}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="driverClassName" value="${jdbc.driver.class}" />
		<property name="filters" value="${filters}" />

		<property name="maxActive" value="${maxActive}" />
		<property name="initialSize" value="${initialSize}" />
		<property name="maxWait" value="${maxWait}" />
		<property name="minIdle" value="${minIdle}" />

		<property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />
		<property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />

		<property name="validationQuery" value="${validationQuery}" />
		<property name="testWhileIdle" value="${testWhileIdle}" />
		<property name="testOnBorrow" value="${testOnBorrow}" />
		<property name="testOnReturn" value="${testOnReturn}" />
		<property name="maxOpenPreparedStatements" value="${maxOpenPreparedStatements}" />
		<property name="removeAbandoned" value="${removeAbandoned}" /> <!-- 打开removeAbandoned功能 -->
		<property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" /> <!-- 1800秒，也就是30分钟 -->
		<property name="logAbandoned" value="${logAbandoned}" /> <!-- 关闭abanded连接时输出错误日志 -->
	</bean>

 
<!-- configLocation为mybatis属性 mapperLocations为所有mapper -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"
		p:dataSource-ref="datastore" p:configLocation="classpath:mybatis-config.xml" 
				p:mapperLocations="classpath:com/ujuit/*/*/mapper/*.xml" 
		/>
	<bean id="sqlSessionTemplate" scope="prototype" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
		<constructor-arg index="1" value="SIMPLE" />
	</bean>
	<bean id="batchSqlSessionTemplate" scope="prototype" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
		<constructor-arg index="1" value="SIMPLE" /><!-- -BATCH -->
	</bean>
 
  	<!-- 初始化: SpringContext -->
    <bean id="springContextUtils" class="com.ujuit.sysmanager.util.SpringContextUtils" />
	<bean id="apiDao"  class="com.ujuit.sysmanager.core.mybatis.impl.DaoImpl"
	  p:dataType="mysql" 
	  p:sqlSessionTemplate-ref="sqlSessionTemplate" /> 
</beans>


